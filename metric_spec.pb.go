// Protos for identifying metrics and specifying thresholds.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: api/adaptive_load/metric_spec.proto

package main

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Identifies a feedback metric.
type MetricSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the metric to evaluate. For the set of built-in metric names, see
	// source/adaptive_load/metrics_plugin_impl.cc. Required.
	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// Name of the MetricsPlugin providing the metric. Optional, default "nighthawk.builtin".
	MetricsPluginName string `protobuf:"bytes,2,opt,name=metrics_plugin_name,json=metricsPluginName,proto3" json:"metrics_plugin_name,omitempty"`
}

func (x *MetricSpec) Reset() {
	*x = MetricSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_adaptive_load_metric_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSpec) ProtoMessage() {}

func (x *MetricSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_adaptive_load_metric_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSpec.ProtoReflect.Descriptor instead.
func (*MetricSpec) Descriptor() ([]byte, []int) {
	return file_api_adaptive_load_metric_spec_proto_rawDescGZIP(), []int{0}
}

func (x *MetricSpec) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricSpec) GetMetricsPluginName() string {
	if x != nil {
		return x.MetricsPluginName
	}
	return ""
}

// Specifies how to score a metric against a threshold.
type ThresholdSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selection and configuration of a ScoringFunction that measures proximity
	// to a threshold. 0.0 means the value equals the threshold, positive means
	// the value is within the threshold so the input should ramp up, and
	// negative means the value is outside the threshold so input should ramp
	// down.
	ScoringFunction *v3.TypedExtensionConfig `protobuf:"bytes,1,opt,name=scoring_function,json=scoringFunction,proto3" json:"scoring_function,omitempty"`
	// Relative importance of this threshold when adjusting based on multiple
	// metrics. Optional, default 1.0.
	Weight *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ThresholdSpec) Reset() {
	*x = ThresholdSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_adaptive_load_metric_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThresholdSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThresholdSpec) ProtoMessage() {}

func (x *ThresholdSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_adaptive_load_metric_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThresholdSpec.ProtoReflect.Descriptor instead.
func (*ThresholdSpec) Descriptor() ([]byte, []int) {
	return file_api_adaptive_load_metric_spec_proto_rawDescGZIP(), []int{1}
}

func (x *ThresholdSpec) GetScoringFunction() *v3.TypedExtensionConfig {
	if x != nil {
		return x.ScoringFunction
	}
	return nil
}

func (x *ThresholdSpec) GetWeight() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Weight
	}
	return nil
}

// Identifies a feedback metric and specifies a threshold for it.
type MetricSpecWithThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies a metric to collect and evaluate. Required.
	MetricSpec *MetricSpec `protobuf:"bytes,1,opt,name=metric_spec,json=metricSpec,proto3" json:"metric_spec,omitempty"`
	// Specifies a threshold for this metric. Required.
	ThresholdSpec *ThresholdSpec `protobuf:"bytes,2,opt,name=threshold_spec,json=thresholdSpec,proto3" json:"threshold_spec,omitempty"`
}

func (x *MetricSpecWithThreshold) Reset() {
	*x = MetricSpecWithThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_adaptive_load_metric_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSpecWithThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSpecWithThreshold) ProtoMessage() {}

func (x *MetricSpecWithThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_api_adaptive_load_metric_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSpecWithThreshold.ProtoReflect.Descriptor instead.
func (*MetricSpecWithThreshold) Descriptor() ([]byte, []int) {
	return file_api_adaptive_load_metric_spec_proto_rawDescGZIP(), []int{2}
}

func (x *MetricSpecWithThreshold) GetMetricSpec() *MetricSpec {
	if x != nil {
		return x.MetricSpec
	}
	return nil
}

func (x *MetricSpecWithThreshold) GetThresholdSpec() *ThresholdSpec {
	if x != nil {
		return x.ThresholdSpec
	}
	return nil
}

var File_api_adaptive_load_metric_spec_proto protoreflect.FileDescriptor

var file_api_adaptive_load_metric_spec_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b,
	0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x24,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a,
	0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5f, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x12, 0x09, 0x21, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc2,
	0x01, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x0e, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_adaptive_load_metric_spec_proto_rawDescOnce sync.Once
	file_api_adaptive_load_metric_spec_proto_rawDescData = file_api_adaptive_load_metric_spec_proto_rawDesc
)

func file_api_adaptive_load_metric_spec_proto_rawDescGZIP() []byte {
	file_api_adaptive_load_metric_spec_proto_rawDescOnce.Do(func() {
		file_api_adaptive_load_metric_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_adaptive_load_metric_spec_proto_rawDescData)
	})
	return file_api_adaptive_load_metric_spec_proto_rawDescData
}

var file_api_adaptive_load_metric_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_adaptive_load_metric_spec_proto_goTypes = []interface{}{
	(*MetricSpec)(nil),              // 0: nighthawk.adaptive_load.MetricSpec
	(*ThresholdSpec)(nil),           // 1: nighthawk.adaptive_load.ThresholdSpec
	(*MetricSpecWithThreshold)(nil), // 2: nighthawk.adaptive_load.MetricSpecWithThreshold
	(*v3.TypedExtensionConfig)(nil),    // 3: envoy.config.core.v3.v3.TypedExtensionConfig
	(*wrapperspb.DoubleValue)(nil),  // 4: google.protobuf.DoubleValue
}
var file_api_adaptive_load_metric_spec_proto_depIdxs = []int32{
	3, // 0: nighthawk.adaptive_load.ThresholdSpec.scoring_function:type_name -> envoy.config.core.v3.v3.TypedExtensionConfig
	4, // 1: nighthawk.adaptive_load.ThresholdSpec.weight:type_name -> google.protobuf.DoubleValue
	0, // 2: nighthawk.adaptive_load.MetricSpecWithThreshold.metric_spec:type_name -> nighthawk.adaptive_load.MetricSpec
	1, // 3: nighthawk.adaptive_load.MetricSpecWithThreshold.threshold_spec:type_name -> nighthawk.adaptive_load.ThresholdSpec
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_adaptive_load_metric_spec_proto_init() }
func file_api_adaptive_load_metric_spec_proto_init() {
	if File_api_adaptive_load_metric_spec_proto != nil {
		return
	}
	// TODO:
	//file_envoy_config_core_v3_extension_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_adaptive_load_metric_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_adaptive_load_metric_spec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThresholdSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_adaptive_load_metric_spec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSpecWithThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_adaptive_load_metric_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_adaptive_load_metric_spec_proto_goTypes,
		DependencyIndexes: file_api_adaptive_load_metric_spec_proto_depIdxs,
		MessageInfos:      file_api_adaptive_load_metric_spec_proto_msgTypes,
	}.Build()
	File_api_adaptive_load_metric_spec_proto = out.File
	file_api_adaptive_load_metric_spec_proto_rawDesc = nil
	file_api_adaptive_load_metric_spec_proto_goTypes = nil
	file_api_adaptive_load_metric_spec_proto_depIdxs = nil
}
