// Top-level session spec and output protos for the adaptive load controller.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: api/adaptive_load/adaptive_load.proto

package main

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parameters describing the adjusting and testing stages of an adaptive load
// session, which consists of a series of Nighthawk benchmarks probing for
// the optimal load on the system, followed by a longer benchmark to validate
// the values. Load adjustments are calculated by the selected StepController
// plugin. Metrics can come from Nighthawk stats and counters or
// platform-specific data sources via MetricsPlugins.
type AdaptiveLoadSessionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Settings for MetricsPlugins that obtain metrics from outside sources.
	// An entry is required for every plugin referred to by metric_thresholds,
	// other than the "nighthawk.builtin" plugin. Optional.
	MetricsPluginConfigs []*v3.TypedExtensionConfig `protobuf:"bytes,1,rep,name=metrics_plugin_configs,json=metricsPluginConfigs,proto3" json:"metrics_plugin_configs,omitempty"`
	// Metrics and thresholds that determine load adjustments. The order of
	// metrics is not significant. Required.
	MetricThresholds []*MetricSpecWithThreshold `protobuf:"bytes,2,rep,name=metric_thresholds,json=metricThresholds,proto3" json:"metric_thresholds,omitempty"`
	// Metrics that are collected and included in the output but not taken into
	// account when adjusting the load. May be used for debugging or
	// visualization. Optional.
	InformationalMetricSpecs []*MetricSpec `protobuf:"bytes,3,rep,name=informational_metric_specs,json=informationalMetricSpecs,proto3" json:"informational_metric_specs,omitempty"`
	// A proto describing Nighthawk Service traffic. See
	// https://github.com/envoyproxy/nighthawk/blob/main/api/client/options.proto
	//
	// The adaptive load controller will return an error if the |duration| field is set within
	// |nighthawk_traffic_template|.
	//
	// If |open_loop| is unset, it will be overridden to true by the adaptive load controller. This is
	// to support the typical case where the controller needs full control over attempted requests per
	// second, which could conflict with the backpressure mechanism of closed-loop mode. Note that in
	// standalone Nighthawk clients, closed-loop mode is the default.
	//
	// The controller will override at least one field in this proto to vary the load, such as the
	// requests_per_second field or headers. Any existing value for such a field in the template will
	// be ignored.
	//
	// All other fields in |nighthawk_traffic_template| are passed through to the
	// Nighthawk Service.
	//
	// Note that |concurrency| in |nighthawk_traffic_template| multiplies the total
	// RPS sent.
	//
	// Required.
	NighthawkTrafficTemplate *CommandLineOptions `protobuf:"bytes,4,opt,name=nighthawk_traffic_template,json=nighthawkTrafficTemplate,proto3" json:"nighthawk_traffic_template,omitempty"`
	// The duration of each short benchmark during the adjusting stage. Optional, default 10 seconds.
	MeasuringPeriod *durationpb.Duration `protobuf:"bytes,5,opt,name=measuring_period,json=measuringPeriod,proto3" json:"measuring_period,omitempty"`
	//  Maximum amount of time the adjusting stage should wait for convergence
	//  before returning an error. Optional, default 300 seconds.
	ConvergenceDeadline *durationpb.Duration `protobuf:"bytes,6,opt,name=convergence_deadline,json=convergenceDeadline,proto3" json:"convergence_deadline,omitempty"`
	// The duration of the single benchmark session of the testing stage to
	// confirm the performance at the level of load found in the adjusting stage.
	// Optional, default 30 seconds.
	TestingStageDuration *durationpb.Duration `protobuf:"bytes,7,opt,name=testing_stage_duration,json=testingStageDuration,proto3" json:"testing_stage_duration,omitempty"`
	// The duration to wait between individual short benchmarks during the
	// adjusting stage and between the last short benchmark of the adjusting stage
	// and the testing stage.
	// Optional, defaults to zero duration.
	BenchmarkCooldownDuration *durationpb.Duration `protobuf:"bytes,9,opt,name=benchmark_cooldown_duration,json=benchmarkCooldownDuration,proto3" json:"benchmark_cooldown_duration,omitempty"`
	// Selects and configures a StepController plugin. Required.
	StepControllerConfig *v3.TypedExtensionConfig `protobuf:"bytes,8,opt,name=step_controller_config,json=stepControllerConfig,proto3" json:"step_controller_config,omitempty"`
}

func (x *AdaptiveLoadSessionSpec) Reset() {
	*x = AdaptiveLoadSessionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_adaptive_load_adaptive_load_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveLoadSessionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveLoadSessionSpec) ProtoMessage() {}

func (x *AdaptiveLoadSessionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_adaptive_load_adaptive_load_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveLoadSessionSpec.ProtoReflect.Descriptor instead.
func (*AdaptiveLoadSessionSpec) Descriptor() ([]byte, []int) {
	return file_api_adaptive_load_adaptive_load_proto_rawDescGZIP(), []int{0}
}

func (x *AdaptiveLoadSessionSpec) GetMetricsPluginConfigs() []*v3.TypedExtensionConfig {
	if x != nil {
		return x.MetricsPluginConfigs
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetMetricThresholds() []*MetricSpecWithThreshold {
	if x != nil {
		return x.MetricThresholds
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetInformationalMetricSpecs() []*MetricSpec {
	if x != nil {
		return x.InformationalMetricSpecs
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetNighthawkTrafficTemplate() *CommandLineOptions {
	if x != nil {
		return x.NighthawkTrafficTemplate
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetMeasuringPeriod() *durationpb.Duration {
	if x != nil {
		return x.MeasuringPeriod
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetConvergenceDeadline() *durationpb.Duration {
	if x != nil {
		return x.ConvergenceDeadline
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetTestingStageDuration() *durationpb.Duration {
	if x != nil {
		return x.TestingStageDuration
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetBenchmarkCooldownDuration() *durationpb.Duration {
	if x != nil {
		return x.BenchmarkCooldownDuration
	}
	return nil
}

func (x *AdaptiveLoadSessionSpec) GetStepControllerConfig() *v3.TypedExtensionConfig {
	if x != nil {
		return x.StepControllerConfig
	}
	return nil
}

// Complete description of an adaptive load session, including metric scores
// for every degree of load attempted during the adjusting stage.
type AdaptiveLoadSessionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Results of each short benchmark performed during the adjusting stage.
	AdjustingStageResults []*BenchmarkResult `protobuf:"bytes,2,rep,name=adjusting_stage_results,json=adjustingStageResults,proto3" json:"adjusting_stage_results,omitempty"`
	// Result of the single benchmark of the testing stage.
	TestingStageResult *BenchmarkResult `protobuf:"bytes,3,opt,name=testing_stage_result,json=testingStageResult,proto3" json:"testing_stage_result,omitempty"`
	// Metrics and thresholds that were used to determine load adjustments, as referenced in the
	// BenchmarkResults.
	MetricThresholds []*MetricSpecWithThreshold `protobuf:"bytes,4,rep,name=metric_thresholds,json=metricThresholds,proto3" json:"metric_thresholds,omitempty"`
}

func (x *AdaptiveLoadSessionOutput) Reset() {
	*x = AdaptiveLoadSessionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_adaptive_load_adaptive_load_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdaptiveLoadSessionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdaptiveLoadSessionOutput) ProtoMessage() {}

func (x *AdaptiveLoadSessionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_api_adaptive_load_adaptive_load_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdaptiveLoadSessionOutput.ProtoReflect.Descriptor instead.
func (*AdaptiveLoadSessionOutput) Descriptor() ([]byte, []int) {
	return file_api_adaptive_load_adaptive_load_proto_rawDescGZIP(), []int{1}
}

func (x *AdaptiveLoadSessionOutput) GetAdjustingStageResults() []*BenchmarkResult {
	if x != nil {
		return x.AdjustingStageResults
	}
	return nil
}

func (x *AdaptiveLoadSessionOutput) GetTestingStageResult() *BenchmarkResult {
	if x != nil {
		return x.TestingStageResult
	}
	return nil
}

func (x *AdaptiveLoadSessionOutput) GetMetricThresholds() []*MetricSpecWithThreshold {
	if x != nil {
		return x.MetricThresholds
	}
	return nil
}

var File_api_adaptive_load_adaptive_load_proto protoreflect.FileDescriptor

var file_api_adaptive_load_adaptive_load_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61,
	0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x89, 0x07, 0x0a, 0x17, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x60, 0x0a,
	0x16, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x67, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x1a, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x18, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x6c, 0x0a, 0x1a, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x18, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x59, 0x0a, 0x16, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x14, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1b,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x19, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x16, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x14, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb8, 0x02,
	0x0a, 0x19, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x60, 0x0a, 0x17, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x5a, 0x0a,
	0x14, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b,
	0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_adaptive_load_adaptive_load_proto_rawDescOnce sync.Once
	file_api_adaptive_load_adaptive_load_proto_rawDescData = file_api_adaptive_load_adaptive_load_proto_rawDesc
)

func file_api_adaptive_load_adaptive_load_proto_rawDescGZIP() []byte {
	file_api_adaptive_load_adaptive_load_proto_rawDescOnce.Do(func() {
		file_api_adaptive_load_adaptive_load_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_adaptive_load_adaptive_load_proto_rawDescData)
	})
	return file_api_adaptive_load_adaptive_load_proto_rawDescData
}

var file_api_adaptive_load_adaptive_load_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_adaptive_load_adaptive_load_proto_goTypes = []interface{}{
	(*AdaptiveLoadSessionSpec)(nil),   // 0: nighthawk.adaptive_load.AdaptiveLoadSessionSpec
	(*AdaptiveLoadSessionOutput)(nil), // 1: nighthawk.adaptive_load.AdaptiveLoadSessionOutput
	(*v3.TypedExtensionConfig)(nil),      // 2: envoy.config.core.v3.v3.TypedExtensionConfig
	(*MetricSpecWithThreshold)(nil),   // 3: nighthawk.adaptive_load.MetricSpecWithThreshold
	(*MetricSpec)(nil),                // 4: nighthawk.adaptive_load.MetricSpec
	(*CommandLineOptions)(nil),        // 5: nighthawk.client.CommandLineOptions
	(*durationpb.Duration)(nil),       // 6: google.protobuf.Duration
	(*BenchmarkResult)(nil),           // 7: nighthawk.adaptive_load.BenchmarkResult
}
var file_api_adaptive_load_adaptive_load_proto_depIdxs = []int32{
	2,  // 0: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.metrics_plugin_configs:type_name -> envoy.config.core.v3.v3.TypedExtensionConfig
	3,  // 1: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.metric_thresholds:type_name -> nighthawk.adaptive_load.MetricSpecWithThreshold
	4,  // 2: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.informational_metric_specs:type_name -> nighthawk.adaptive_load.MetricSpec
	5,  // 3: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.nighthawk_traffic_template:type_name -> nighthawk.client.CommandLineOptions
	6,  // 4: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.measuring_period:type_name -> google.protobuf.Duration
	6,  // 5: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.convergence_deadline:type_name -> google.protobuf.Duration
	6,  // 6: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.testing_stage_duration:type_name -> google.protobuf.Duration
	6,  // 7: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.benchmark_cooldown_duration:type_name -> google.protobuf.Duration
	2,  // 8: nighthawk.adaptive_load.AdaptiveLoadSessionSpec.step_controller_config:type_name -> envoy.config.core.v3.v3.TypedExtensionConfig
	7,  // 9: nighthawk.adaptive_load.AdaptiveLoadSessionOutput.adjusting_stage_results:type_name -> nighthawk.adaptive_load.BenchmarkResult
	7,  // 10: nighthawk.adaptive_load.AdaptiveLoadSessionOutput.testing_stage_result:type_name -> nighthawk.adaptive_load.BenchmarkResult
	3,  // 11: nighthawk.adaptive_load.AdaptiveLoadSessionOutput.metric_thresholds:type_name -> nighthawk.adaptive_load.MetricSpecWithThreshold
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_adaptive_load_adaptive_load_proto_init() }
func file_api_adaptive_load_adaptive_load_proto_init() {
	if File_api_adaptive_load_adaptive_load_proto != nil {
		return
	}
	file_api_adaptive_load_benchmark_result_proto_init()
	file_api_adaptive_load_metric_spec_proto_init()
	file_api_client_options_proto_init()
	// TODO:
	//file_envoy_config_core_v3_extension_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_adaptive_load_adaptive_load_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveLoadSessionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_adaptive_load_adaptive_load_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdaptiveLoadSessionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_adaptive_load_adaptive_load_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_adaptive_load_adaptive_load_proto_goTypes,
		DependencyIndexes: file_api_adaptive_load_adaptive_load_proto_depIdxs,
		MessageInfos:      file_api_adaptive_load_adaptive_load_proto_msgTypes,
	}.Build()
	File_api_adaptive_load_adaptive_load_proto = out.File
	file_api_adaptive_load_adaptive_load_proto_rawDesc = nil
	file_api_adaptive_load_adaptive_load_proto_goTypes = nil
	file_api_adaptive_load_adaptive_load_proto_depIdxs = nil
}
