// Protos describing the results of running a single Nighthawk benchmark and
// scoring the resulting metrics against thresholds.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: api/adaptive_load/benchmark_result.proto

package main

import (
	_ "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Records the status of a single metric during a benchmark session.
type MetricEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the metric that was evaluated (<plugin name>/<metric name>).
	MetricId string `protobuf:"bytes,1,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	// Numerical value of the metric measured during this benchmark session.
	MetricValue float64 `protobuf:"fixed64,2,opt,name=metric_value,json=metricValue,proto3" json:"metric_value,omitempty"`
	// Score returned by a ScoringFunction plugin. This expresses how close the
	// metric was to the threshold by an arbitrary formula selected and
	// configured in the ThresholdSpec, such as a sigmoid curve. The controller
	// can choose to make larger input adjustments when the score is larger, in
	// order to converge faster. Not set if the metric was only informational.
	ThresholdScore float64 `protobuf:"fixed64,3,opt,name=threshold_score,json=thresholdScore,proto3" json:"threshold_score,omitempty"`
	// Configured weight of the metric. 0.0 if the metric was only informational.
	Weight float64 `protobuf:"fixed64,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *MetricEvaluation) Reset() {
	*x = MetricEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_adaptive_load_benchmark_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricEvaluation) ProtoMessage() {}

func (x *MetricEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_api_adaptive_load_benchmark_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricEvaluation.ProtoReflect.Descriptor instead.
func (*MetricEvaluation) Descriptor() ([]byte, []int) {
	return file_api_adaptive_load_benchmark_result_proto_rawDescGZIP(), []int{0}
}

func (x *MetricEvaluation) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

func (x *MetricEvaluation) GetMetricValue() float64 {
	if x != nil {
		return x.MetricValue
	}
	return 0
}

func (x *MetricEvaluation) GetThresholdScore() float64 {
	if x != nil {
		return x.ThresholdScore
	}
	return 0
}

func (x *MetricEvaluation) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// Summary of a single Nighthawk Service benchmark session with evaluation
// results.
type BenchmarkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw Nighthawk Service output. Includes start/end times and full Nighthawk
	// Service input spec.
	NighthawkServiceOutput *Output `protobuf:"bytes,1,opt,name=nighthawk_service_output,json=nighthawkServiceOutput,proto3" json:"nighthawk_service_output,omitempty"`
	// Status of all declared metrics during this benchmark session. Not present
	// in the event of Nighthawk Service errors.
	MetricEvaluations []*MetricEvaluation `protobuf:"bytes,3,rep,name=metric_evaluations,json=metricEvaluations,proto3" json:"metric_evaluations,omitempty"`
	// The time this benchmark session started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time this benchmark session ended.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *BenchmarkResult) Reset() {
	*x = BenchmarkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_adaptive_load_benchmark_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkResult) ProtoMessage() {}

func (x *BenchmarkResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_adaptive_load_benchmark_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkResult.ProtoReflect.Descriptor instead.
func (*BenchmarkResult) Descriptor() ([]byte, []int) {
	return file_api_adaptive_load_benchmark_result_proto_rawDescGZIP(), []int{1}
}

func (x *BenchmarkResult) GetNighthawkServiceOutput() *Output {
	if x != nil {
		return x.NighthawkServiceOutput
	}
	return nil
}

func (x *BenchmarkResult) GetMetricEvaluations() []*MetricEvaluation {
	if x != nil {
		return x.MetricEvaluations
	}
	return nil
}

func (x *BenchmarkResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BenchmarkResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

var File_api_adaptive_load_benchmark_result_proto protoreflect.FileDescriptor

var file_api_adaptive_load_benchmark_result_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb1, 0x02, 0x0a,
	0x0f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x52, 0x0a, 0x18, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x16, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x77, 0x6b, 0x2e, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_adaptive_load_benchmark_result_proto_rawDescOnce sync.Once
	file_api_adaptive_load_benchmark_result_proto_rawDescData = file_api_adaptive_load_benchmark_result_proto_rawDesc
)

func file_api_adaptive_load_benchmark_result_proto_rawDescGZIP() []byte {
	file_api_adaptive_load_benchmark_result_proto_rawDescOnce.Do(func() {
		file_api_adaptive_load_benchmark_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_adaptive_load_benchmark_result_proto_rawDescData)
	})
	return file_api_adaptive_load_benchmark_result_proto_rawDescData
}

var file_api_adaptive_load_benchmark_result_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_adaptive_load_benchmark_result_proto_goTypes = []interface{}{
	(*MetricEvaluation)(nil),      // 0: nighthawk.adaptive_load.MetricEvaluation
	(*BenchmarkResult)(nil),       // 1: nighthawk.adaptive_load.BenchmarkResult
	(*Output)(nil),                // 2: nighthawk.client.Output
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_api_adaptive_load_benchmark_result_proto_depIdxs = []int32{
	2, // 0: nighthawk.adaptive_load.BenchmarkResult.nighthawk_service_output:type_name -> nighthawk.client.Output
	0, // 1: nighthawk.adaptive_load.BenchmarkResult.metric_evaluations:type_name -> nighthawk.adaptive_load.MetricEvaluation
	3, // 2: nighthawk.adaptive_load.BenchmarkResult.start_time:type_name -> google.protobuf.Timestamp
	3, // 3: nighthawk.adaptive_load.BenchmarkResult.end_time:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_api_adaptive_load_benchmark_result_proto_init() }
func file_api_adaptive_load_benchmark_result_proto_init() {
	if File_api_adaptive_load_benchmark_result_proto != nil {
		return
	}
	file_api_client_output_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_adaptive_load_benchmark_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_adaptive_load_benchmark_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_adaptive_load_benchmark_result_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_adaptive_load_benchmark_result_proto_goTypes,
		DependencyIndexes: file_api_adaptive_load_benchmark_result_proto_depIdxs,
		MessageInfos:      file_api_adaptive_load_benchmark_result_proto_msgTypes,
	}.Build()
	File_api_adaptive_load_benchmark_result_proto = out.File
	file_api_adaptive_load_benchmark_result_proto_rawDesc = nil
	file_api_adaptive_load_benchmark_result_proto_goTypes = nil
	file_api_adaptive_load_benchmark_result_proto_depIdxs = nil
}
